.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Statistics::ChiSquare 3"
.TH Statistics::ChiSquare 3 "2003-11-17" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
\&\f(CW\*(C`Statistics::ChiSquare\*(C'\fR \- How well\-distributed is your data?
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Statistics::ChiSquare;
.Ve
.PP
.Vb 1
\&    print chisquare(@array_of_numbers);
.Ve
.PP
Statistics::ChiSquare is available at a \s-1CPAN\s0 site near you.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Suppose you flip a coin 100 times, and it turns up heads 70 times.
\&\fIIs the coin fair?\fR
.PP
Suppose you roll a die 100 times, and it shows 30 sixes.  
\&\fIIs the die loaded?\fR
.PP
In statistics, the \fBchi-square\fR test calculates how well a series
of numbers fits a distribution.  In this module, we only test for
whether results fit an even distribution.  It doesn't simply say
\&\*(L"yes\*(R" or \*(L"no\*(R".  Instead, it
gives you a \fIconfidence interval\fR, which sets upper and lower bounds
on the likelihood that the variation in your data is due to chance.
See the examples below. 
.PP
If you've ever studied elementary genetics, you've probably heard
about Georg Mendel.  He was a wacky Austrian botanist who discovered
(in 1865) that traits could be inherited in a predictable fashion.  He
did lots of experiments with cross breeding peas: green peas, yellow
peas, smooth peas, wrinkled peas.  A veritable Brave New World of legumes.
.PP
But Mendel faked his data.  A statistician by the name of R. A. Fisher used
the chi-square test to prove it.
.PP
There's just one function in this module: \fIchisquare()\fR.  Instead of
returning the bounds on the confidence interval in a tidy little
two-element array, it returns an English string.  This was a deliberate
design choice\-\-\-many people misinterpret chi-square results, and the
string helps clarify the meaning. 
.PP
The string returned by \fIchisquare()\fR will always match one of these patterns:
.PP
.Vb 1
\&  "There's a >\ed+% chance, and a <\ed+% chance, that this data is random."
.Ve
.PP
or 
.PP
.Vb 1
\&  "There's a <\ed+% chance that this data is random."
.Ve
.PP
or 
.PP
.Vb 1
\&  "I can't handle \ed+ choices without a better table."
.Ve
.PP
That last one deserves a bit more explanation.  The \*(L"modern\*(R"
chi-square test uses a table of values (based on Pearson's
approximation) to avoid expensive calculations.  Thanks to the table,
the \fIchisquare()\fR calculation is very fast, but there are some
collections of data it can't handle, including any collection with more
than 31 slots.  So you can't calculate the randomness of a 50\-sided
die.
.PP
You will also notice that the percentage points that have been tabulated
for different numbers of data points \- that is, for different degrees of
freedom \- differ.  The table in Jon Orwant's original version has
data tabulated for 100%, 99%, 95%, 90%, 70%, 50%, 30%, 10%, 5%, and 1%
likelihoods.  Data added later by David Cantrell is tabulated for
100%, 99%, 95%, 90%, 75%, 50%, 25%, 10%, 5%, and 1% likelihoods.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Imagine a coin flipped 1000 times.  The expected outcome is 
500 heads and 500 tails:
.PP
.Vb 2
\&  @coin = (500, 500);
\&  print chisquare(@coin);
.Ve
.PP
prints "There's a >90% chance, and a <100% chance, that this data is random.
.PP
Imagine a die rolled 60 times that shows sixes just a wee bit too often.
.PP
.Vb 2
\&  @die1  = (8, 7, 9, 8, 8, 20);
\&  print chisquare(@die1);
.Ve
.PP
prints "There's a >1% chance, and a <5% chance, that this data is random.
.PP
Imagine a die rolled 600 times that shows sixes \fBway\fR too often.
.PP
.Vb 2
\&  @die2  = (80, 70, 90, 80, 80, 200);
\&  print chisquare(@die2);
.Ve
.PP
prints \*(L"There's a <1% chance that this data is random.\*(R"
.PP
How random is \fIrand()\fR?
.PP
.Vb 8
\&  srand(time ^ $$);
\&  @rands = ();
\&  for ($i = 0; $i < 60000; $i++) {
\&      $slot = int(rand(6));
\&      $rands[$slot]++;
\&  }
\&  print "@rands\en";
\&  print chisquare(@rands);
.Ve
.PP
prints (on my machine)
.PP
.Vb 2
\&  10156 10041 9991 9868 10034 9910
\&  There's a >10% chance, and a <50% chance, that this data is random.
.Ve
.PP
So much for pseudorandom number generation.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jon Orwant, Readable Publications, Inc; orwant@oreilly.com
.PP
Maintained and updated since October 2003 by David Cantrell,
david@cantrell.org.uk
